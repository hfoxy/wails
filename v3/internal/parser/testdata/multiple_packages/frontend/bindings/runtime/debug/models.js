// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

/**
 * BuildInfo represents the build information read from a Go binary.
 */
export class BuildInfo {
    /**
     * Creates a new BuildInfo instance.
     * @param {Partial<BuildInfo>} [source = {}] - The source object to create the BuildInfo.
     */
    constructor(source = {}) {
        if (!("GoVersion" in source)) {
            /**
             * GoVersion is the version of the Go toolchain that built the binary
             * (for example, "go1.19.2").
             * @member
             * @type {string}
             */
            this["GoVersion"] = "";
        }
        if (!("Path" in source)) {
            /**
             * Path is the package path of the main package for the binary
             * (for example, "golang.org/x/tools/cmd/stringer").
             * @member
             * @type {string}
             */
            this["Path"] = "";
        }
        if (!("Main" in source)) {
            /**
             * Main describes the module that contains the main package for the binary.
             * @member
             * @type {Module}
             */
            this["Main"] = (new Module());
        }
        if (!("Deps" in source)) {
            /**
             * Deps describes all the dependency modules, both direct and indirect,
             * that contributed packages to the build of this binary.
             * @member
             * @type {(Module | null)[]}
             */
            this["Deps"] = [];
        }
        if (!("Settings" in source)) {
            /**
             * Settings describes the build settings used to build the binary.
             * @member
             * @type {BuildSetting[]}
             */
            this["Settings"] = [];
        }

        Object.assign(this, source);
    }

    /**
     * Creates a new BuildInfo instance from a string or object.
     * @param {string|object} source - The source data to create a BuildInfo instance from.
     * @returns {BuildInfo} A new BuildInfo instance.
     */
    static createFrom(source) {
        let parsedSource = typeof source === 'string' ? JSON.parse(source) : source;
        return new BuildInfo(parsedSource);
    }
};

/**
 * A BuildSetting is a key-value pair describing one setting that influenced a build.
 * 
 * Defined keys include:
 * 
 *   - -buildmode: the buildmode flag used (typically "exe")
 *   - -compiler: the compiler toolchain flag used (typically "gc")
 *   - CGO_ENABLED: the effective CGO_ENABLED environment variable
 *   - CGO_CFLAGS: the effective CGO_CFLAGS environment variable
 *   - CGO_CPPFLAGS: the effective CGO_CPPFLAGS environment variable
 *   - CGO_CXXFLAGS:  the effective CGO_CXXFLAGS environment variable
 *   - CGO_LDFLAGS: the effective CGO_LDFLAGS environment variable
 *   - GOARCH: the architecture target
 *   - GOAMD64/GOARM/GO386/etc: the architecture feature level for GOARCH
 *   - GOOS: the operating system target
 *   - vcs: the version control system for the source tree where the build ran
 *   - vcs.revision: the revision identifier for the current commit or checkout
 *   - vcs.time: the modification time associated with vcs.revision, in RFC3339 format
 *   - vcs.modified: true or false indicating whether the source tree had local modifications
 */
export class BuildSetting {
    /**
     * Creates a new BuildSetting instance.
     * @param {Partial<BuildSetting>} [source = {}] - The source object to create the BuildSetting.
     */
    constructor(source = {}) {
        if (!("Key" in source)) {
            /**
             * Key and Value describe the build setting.
             * Key must not contain an equals sign, space, tab, or newline.
             * Value must not contain newlines ('\n').
             * @member
             * @type {string}
             */
            this["Key"] = "";
        }
        if (!("Value" in source)) {
            /**
             * Key and Value describe the build setting.
             * Key must not contain an equals sign, space, tab, or newline.
             * Value must not contain newlines ('\n').
             * @member
             * @type {string}
             */
            this["Value"] = "";
        }

        Object.assign(this, source);
    }

    /**
     * Creates a new BuildSetting instance from a string or object.
     * @param {string|object} source - The source data to create a BuildSetting instance from.
     * @returns {BuildSetting} A new BuildSetting instance.
     */
    static createFrom(source) {
        let parsedSource = typeof source === 'string' ? JSON.parse(source) : source;
        return new BuildSetting(parsedSource);
    }
};

/**
 * A Module describes a single module included in a build.
 */
export class Module {
    /**
     * Creates a new Module instance.
     * @param {Partial<Module>} [source = {}] - The source object to create the Module.
     */
    constructor(source = {}) {
        if (!("Path" in source)) {
            /**
             * @member
             * @type {string}
             */
            this["Path"] = "";
        }
        if (!("Version" in source)) {
            /**
             * @member
             * @type {string}
             */
            this["Version"] = "";
        }
        if (!("Sum" in source)) {
            /**
             * @member
             * @type {string}
             */
            this["Sum"] = "";
        }
        if (!("Replace" in source)) {
            /**
             * @member
             * @type {Module | null}
             */
            this["Replace"] = null;
        }

        Object.assign(this, source);
    }

    /**
     * Creates a new Module instance from a string or object.
     * @param {string|object} source - The source data to create a Module instance from.
     * @returns {Module} A new Module instance.
     */
    static createFrom(source) {
        let parsedSource = typeof source === 'string' ? JSON.parse(source) : source;
        return new Module(parsedSource);
    }
};
