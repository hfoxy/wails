// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
{{$pkg := .Package}}
{{- $models := .ModelsFilename}}
{{- range $name, $path := .Imports}}
import * as {{$name}} from "{{$path}}/{{$models}}.js";
{{- end}}{{if .Imports}}
{{end}}
{{- range .Aliases}}
/**
{{- $doc := .DocComment $pkg}} 
{{- if $doc}}
 * {{jsdoc $doc ""}}
{{- end}}
 * @typedef { {{- .JSType $pkg -}} } {{.Name}}
 */
{{end}}
{{- range $enumindex, $enumdef := .Enums}}
/**
{{- $doc := .DocComment $pkg}}
{{- if $doc}}
 * {{jsdoc $doc ""}}
{{- end}}
 * @readonly
 * @enum { {{- .JSType $pkg -}} }
 */
export const {{$enumdef.Name}} = {
    {{- range $constindex, $constdef := .Consts}}
    {{- $doc := .DocComment $pkg $enumdef}}
    {{- if $doc}}{{if gt $constindex 0}}
{{end}}
    /**
     * {{jsdoc $doc "    "}}
     */
    {{- end}}
    {{$constdef.Name}}: {{$constdef.Value}},{{end}}
};
{{end}}
{{- range $name, $def := .Structs}}
{{- $doc := .DocComment $pkg}}
{{- if $doc}}
/**
 * {{jsdoc $doc ""}}
 */
{{- end}}
export class {{$def.Name}} {
    /**
     * Creates a new {{$def.Name}} instance.
     * @param {Partial<{{$def.Name}}>} [source = {}] - The source object to create the {{$def.Name}}.
     */
    constructor(source = {}) {
    {{- range $def.Fields}}
        {{- /*
            In JS we need to set all properties explicitly
            because JSDoc has no support for arbitrary property names yet.
            See https://github.com/jsdoc/jsdoc/issues/1468

            For optional fields we make the initialization code unreachable
            and cast the false condition to any to prevent any complaint from Typescript.
        */}}
        if ({{if .Optional}}/** @type {any} */(false){{else}}!("{{js .JSName}}" in source){{end}}) {
            /**
            {{- $doc := .DocComment $pkg}}
            {{- if $doc}}
             * {{jsdoc $doc "            "}}
            {{- end}}
             * @member
             * @type { {{- .JSType $pkg}}{{if .Optional}} | undefined{{end -}} }
             */
            this["{{js .JSName}}"] = {{.DefaultValue $pkg}};
        }
    {{- end}}

        Object.assign(this, source);
    }

    /**
     * Creates a new {{$def.Name}} instance from a string or object.
     * @param {string|object} source - The source data to create a {{$def.Name}} instance from.
     * @returns { {{- $def.Name -}} } A new {{$def.Name}} instance.
     */
    static createFrom(source) {
        let parsedSource = typeof source === 'string' ? JSON.parse(source) : source;
        return new {{$def.Name}}(parsedSource);
    }
};
{{end -}}
